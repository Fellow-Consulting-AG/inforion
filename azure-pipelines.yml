trigger:
  branches:
    include:
      - master
      - releases/*
  tags:
    include:
      - v*

stages:
  - stage: "Test"
    jobs:
      - job: Windows
        pool:
          vmImage: "vs2017-win2016"
        strategy:
          maxParallel: 3
          matrix:
            #Python36:
            #  python.version: "3.6"
            Python37:
              python.version: "3.7"
            Python38:
              python.version: "3.8"
        steps:
          - task: DownloadSecureFile@1
            name: FellowKeyionapi
            displayName: "Download ION certificate"
            inputs:
              secureFile: "FellowKey.ionapi"
          - task: DownloadSecureFile@1
            inputs:
              secureFile: credentials.ionapi
          - task: DownloadSecureFile@1
            inputs:
              secureFile: TestMapping.xlsx
          - task: DownloadSecureFile@1
            inputs:
              secureFile: TestMappingError.xlsx
          - task: DownloadSecureFile@1
            inputs:
              secureFile: SampleOutput.xlsx
          - task: DownloadSecureFile@1
            inputs:
              secureFile: SampleWcOutput.xlsx
          - task: DownloadSecureFile@1
            inputs:
              secureFile: StagingData.xlsx
          - task: DownloadSecureFile@1
            inputs:
              secureFile: StagingWcData.xlsx

          - script: |
              move /Y D:\a\_temp\FellowKey.ionapi $(Build.SourcesDirectory)

              mkdir $(Build.SourcesDirectory)\credentials
              move /Y D:\a\_temp\credentials.ionapi $(Build.SourcesDirectory)\credentials

              mkdir $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\TestMapping.xlsx $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\TestMappingError.xlsx $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\SampleOutput.xlsx $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\SampleWcOutput.xlsx $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\StagingData.xlsx $(Build.SourcesDirectory)\data
              move /Y D:\a\_temp\StagingWcData.xlsx $(Build.SourcesDirectory)\data

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(python.version)"
          - pwsh: |
              choco install --yes --no-progress python3
            displayName: "Install system packages"
          - pwsh: |
              refreshenv
              python -m pip install --upgrade pip wheel
              python -m pip install -r requirements/main.txt -r requirements/test.txt .
            displayName: "Install Python packages"
          - pwsh: |
              refreshenv
              $env:pathext += ';.py'
              python setup.py develop
              python -m pytest --junitxml=test.xml -o junit_family=xunit1 --cov=inforion --cov-report=xml --cov-report=html
              #pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: "Test"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "test.xml"
              testRunTitle: "$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)"
            condition: succeededOrFailed()
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.xml"
              reportDirectory: "$(System.DefaultWorkingDirectory)/**/htmlcov"
      - job: "Ubuntu_1804"
        pool:
          vmImage: "ubuntu-18.04"
        strategy:
          maxParallel: 3
          matrix:
            #Python36:
            #  python.version: "3.6"
            Python37:
              python.version: "3.7"
            Python38:
              python.version: "3.8"
        steps:
          - task: DownloadSecureFile@1
            name: FellowKeyionapi
            displayName: "Download ION certificate"
            inputs:
              secureFile: "FellowKey.ionapi"
          - task: DownloadSecureFile@1
            name: Credentialsionapi
            inputs:
              secureFile: credentials.ionapi
          - task: DownloadSecureFile@1
            name: TestMapping
            inputs:
              secureFile: TestMapping.xlsx
          - task: DownloadSecureFile@1
            name: TestMappingError
            inputs:
              secureFile: TestMappingError.xlsx
          - task: DownloadSecureFile@1
            name: SampleOutput
            inputs:
              secureFile: SampleOutput.xlsx
          - task: DownloadSecureFile@1
            name: SampleWcOutput
            inputs:
              secureFile: SampleWcOutput.xlsx
          - task: DownloadSecureFile@1
            name: StagingData
            inputs:
              secureFile: StagingData.xlsx
          - task: DownloadSecureFile@1
            name: StagingWcData
            inputs:
              secureFile: StagingWcData.xlsx
          - script: |
              echo Installing $(caCertificate.secureFilePath) to the trusted CA directory...
              sudo cp $(FellowKeyionapi.secureFilePath) $(Pipeline.Workspace)
              sudo cp $(FellowKeyionapi.secureFilePath) /home/vsts/work/1/s/

              sudo cp $(Credentialsionapi.secureFilePath) $(Pipeline.Workspace)
              mkdir $(Build.SourcesDirectory)/credentials
              sudo cp $(Credentialsionapi.secureFilePath) /home/vsts/work/1/s/credentials/

              mkdir $(Build.SourcesDirectory)/data
              sudo cp $(TestMapping.secureFilePath) /home/vsts/work/1/s/data/
              sudo cp $(TestMappingError.secureFilePath) /home/vsts/work/1/s/data/
              sudo cp $(SampleOutput.secureFilePath) /home/vsts/work/1/s/data/
              sudo cp $(SampleWcOutput.secureFilePath) /home/vsts/work/1/s/data/
              sudo cp $(StagingData.secureFilePath) /home/vsts/work/1/s/data/
              sudo cp $(StagingWcData.secureFilePath) /home/vsts/work/1/s/data/

              ls $(Build.SourcesDirectory)
              ls $(Build.SourcesDirectory)/credentials

              sudo apt-get update
              sudo apt-get install unixodbc-dev

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "$(python.version)"
          - bash: |
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends \
                python3-software-properties
            displayName: "Install system packages"
          - bash: |
              curl https://bootstrap.pypa.io/get-pip.py | python3
              python -m pip install -r requirements/test.txt
              python -m pip install setuptools_git_version
              python -m pip install --upgrade pip wheel
              python -m pip install setuptools-git-version
              python -m pip install pytest
              python setup.py egg_info
              python setup.py sdist bdist_wheel egg_info
              python setup.py egg_info .
              cp -r src/inforion.egg-info .
              python setup.py sdist bdist_wheel
            displayName: "Install Python packages"
          - bash: |
              # -n auto is slower on Linux and breaks on Python 3.8
              pytest --junitxml=test.xml -o junit_family=xunit1 --cov=inforion --cov-report=xml
            displayName: "Test"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "test.xml"
              testRunTitle: "$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)"
            condition: succeededOrFailed()
      #- job: "Ubuntu_1604"
      #pool:
      #vmImage: "ubuntu-16.04"
      #strategy:
      #matrix:
      #Python36:
      #python.version: "3.6"
      #steps:
      #- task: UsePythonVersion@0
      #inputs:
      #versionSpec: "$(python.version)"
      #- bash: |
      #sudo apt-get update
      #sudo apt-get install -y --no-install-recommends \
      #  software-properties-common
      #sudo add-apt-repository -y ppa:alex-p/tesseract-ocr
      #sudo apt-get update
      #sudo apt-get install -y --no-install-recommends \
      #displayName: "Install system packages"
      #- bash: |
      #curl https://bootstrap.pypa.io/get-pip.py | python3
      #pip3 install -r requirements/main.txt -r requirements/test.txt .
      #displayName: "Install Python packages"
      #- bash: |
      #tesseract --version
      #displayName: "Record versions"
      #- bash: |
      # -n auto is slower on Linux and breaks on Python 3.8
      #pytest -n0 --junitxml=test.xml --cov=ocrmypdf --cov-report=xml
      #displayName: "Test"
      #- task: PublishTestResults@2
      #inputs:
      #testResultsFiles: "test.xml"
      #testRunTitle: "$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)"
      #condition: succeededOrFailed()

  - stage: "Artifacts"
    variables:
      - group: my-variable-group
      - name: PYPI
        value: $[variables.TOKEN_PYPI] # uses runtime expression
      - name: RTD
        value: $[variables.TOKEN_RTD]
      - name: MyRunNumber
        value: "1$(Date:yyyyMMdd).$(Build.BuildNumber)"
    jobs:
      - job: "sdist_wheel"
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.8"
          - bash: |
              python -m pip install --upgrade pip wheel
              python -m pip install setuptools-git-version
              python -m pip install twine
              python -m pip install --upgrade twine
              python -m pip install -r requirements/main.txt
              python -m pip install -r requirements/test.txt
              python -m pip install setuptools_git_version
              python -m pip install --upgrade pip wheel
              python -m pip install setuptools-git-version
              python -m pip install pytest
              echo $PWD
              echo $(Pipeline.Workspace)
              python setup.py egg_info
              python setup.py egg_info -e .
              cat <<FILE >inforion.egg-info/PKG-INFO
              Metadata-Version: 2.1
              Name: inforion
              Version: $(MyRunNumber)
              Summary: Infor ION Package for Python
              Home-page: https://github.com/dajor/inforion
              Author: Daniel Jordan
              Author-email: daniel.jordan@feellow-consulting.de
              License: UNKNOWN
              Description:
              # PiPy Version
              [![PyPI version](https://badge.fury.io/py/inforion.svg)](https://badge.fury.io/py/inforion)

              # Current Build Status

              [![Build Status](https://dev.azure.com/InforOS/InforION/_apis/build/status/dajor.inforion?branchName=master)](https://dev.azure.com/InforOS/InforION/_build/latest?definitionId=2&branchName=master)



              This is a simple example package. You can use
              [Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)
                to write your content.

              Keywords: Infor,InforION,Datalake,LN,M3
              Platform: UNKNOWN
              Classifier: Programming Language :: Python :: 3
              Classifier: License :: OSI Approved :: MIT License
              Classifier: Operating System :: OS Independent
              Requires-Python: >=3.6
              Description-Content-Type: text/markdown

              FILE
              cp -r inforion.egg-info /home/vsts/work/1/s/inforion.egg-info
              cp -r inforion.egg-info /home/vsts/work/1/s/src/inforion.egg-info
              cp -r /home/vsts/work/1/s/inforion.egg-info /home/vsts/work/1/inforion.egg-info
              echo "Test"
              cat /home/vsts/work/1/s/inforion.egg-info/PKG-INFO
              echo "Test2"
              cat inforion.egg-info/PKG-INFO
              cat $(Pipeline.Workspace)/inforion.egg-info/PKG-INFO
              cp -r inforion.egg-info $(Pipeline.Workspace)
              python setup.py sdist bdist_wheel egg_info
          - script: |
              cat <<FILE >.pypirc
              [distutils]
              index-servers =
                pypi

              [pypi]
                username: dajor
                password: $(TOKEN_PYPI)

              FILE
            displayName: "Generate PyPI auth file"
          - script: |
              python -m twine upload --verbose --skip-existing  --config-file .pypirc dist/*
            displayName: "Upload to PyPI"
          - publish: dist
            artifact: sdist_wheel
          - script: |
              curl -X POST -d "token=$(TOKEN_RTD)" https://readthedocs.org/api/v2/webhook/inforion/124964/
            displayName: "Trigger ReadTheDocs"
